syntax = "proto3";
package game;
option go_package = "game";
import "gamestate.proto";


enum ACTION {
  SB = 0;
  BB = 1;
  STRADDLE = 2;
  CHECK = 3;
  CALL = 4;
  FOLD = 5;
  BET = 6;
  RAISE = 7;
  ALLIN = 8;
}

message HandAction {
  uint32    seat_no = 1;
  ACTION    action = 2;
  float     amount = 3;
}

message HandActionLog {
  float pot = 1;
  repeated HandAction actions = 2; 
}

message NextSeatAction {
  uint32 seat_no = 1;
  repeated ACTION available_actions = 2;
  float straddleAmount = 3;       // straddle amount
  float callAmount = 4;           // what is the amount to call
  float raiseAmount = 5;          // if the caller wants to raise from previous raise
  float minBetAmount = 6;         // min bet is the big blind
  float maxBetAmount = 7;        // calculated for PLO
  float minRaiseAmount = 8;      // min bet is the big blind
  float maxRaiseAmount = 9;      // calculated for PLO
  float allInAmount = 10;         // all in amount
}

message HandPlayerState {
  enum Status {
    ACTIVE = 0;
    FOLDED = 1;
    SAT_OUT = 2;
  }
  Status status = 1;
  float balance = 2;
}

message PlayerBalance {
  uint32 seat_no = 1;
  uint32 player_id = 2;
  float balance = 3;
}

enum HandStatus {
  DEAL = 0;
  PREFLOP = 1;
  FLOP = 2;
  TURN = 3;
  RIVER = 4;
  SHOW_DOWN = 5;
  EVALUATE_HAND = 6;
  RESULT = 7;
  HAND_CLOSED = 8;
}

// This enum is used to determine whether all the players in a round
// has a chance to act or not.
// As soon as a player raises the bet, all the previously acted players
// will have to act again.
// All in will be treated as acted
enum PlayerActRound {
  PLAYER_ACT_EMPTY_SEAT = 0;
  PLAYER_ACT_NOT_ACTED = 1;
  PLAYER_ACT_FOLDED = 2;
  PLAYER_ACT_ACTED = 3;      // bet/raise/call/bb/straddle
  PLAYER_ACT_ALL_IN = 4;     // all in
  PLAYER_ACT_BB = 5;
  PLAYER_ACT_STRADDLE = 6;
}

// message tracks number of players in this pot and the amount in the pot
message SeatsInPots {
  repeated uint32 seats  = 1;
  float pot = 2;
}

message SeatBetting {
  repeated float seat_bet  = 1;
}

message HandState {
  uint32 club_id = 1;

  uint32 game_num = 2;

  uint32 hand_num = 3;

  bytes deck = 4;
  uint32 deck_index = 5;

  // maximum 10 seats
  // tracks the players sitting on each seat
  // the seats are arranged as in typical poker table
  // seat 1 is left side of the dealer, seat 0 is right side of the dealer
  // if a seat is empty, then the player id is 0
  repeated uint32 players_in_seats = 6 [packed=true];

  // player current stack
  uint32 button_pos = 7;
  HandStatus current_state = 8;

  // updated as players fold
  //map <uint32, float> active_seats = 9;
  repeated uint32 active_seats = 9;
  uint32 no_active_seats = 10;

  float current_raise = 11;
  uint32 action_complete_at_seat = 12;
  bool straddle_bet = 13;

  HandActionLog preflop_actions = 14;
  HandActionLog flop_actions = 15;
  HandActionLog turn_actions = 16;
  HandActionLog river_actions = 17;

  // for each pot we are going to track the players in the pot
  // the 0th pot is in the main pot
  repeated SeatsInPots pots = 18;

  // key is HandStatus
  map <uint32, SeatBetting> round_betting = 20;

  map <uint32, bytes> players_cards = 21;
  bytes board_cards = 22;
  bytes board_cards_2 = 23;  // run it twice

  uint32 small_blind_pos = 24;
  uint32 big_blind_pos = 25;

  map <uint32, HandPlayerState> players_state = 26;
  float next_min_raise = 27;

  // game type
  GameType game_type = 28;

  NextSeatAction next_seat_action = 29;

  // results
  map <uint32, PotWinners> pot_winners = 30; // 0 is main pot winners
  HandStatus hand_completed_at = 31;  
  repeated PlayerBalance balance_after_hand = 32;

  repeated PlayerActRound players_acted = 33;
  repeated uint32 all_in_players = 34;
  HandStatus lastState = 35;
}

message HandWinner {
  uint32 seat_no = 1;
  bool lo_card = 2;
  float amount = 3;
}

message PotWinners {
  repeated HandWinner hand_winner = 1;
}

message HandResult {
  HandActionLog preflop_actions = 1;
  HandActionLog flop_actions = 2;
  HandActionLog turn_actions = 3;
  HandActionLog river_actions = 4;
  map <uint32, PotWinners> pot_winners = 5; // 0 is main pot winners
  HandStatus won_at = 6;
  repeated PlayerBalance balance_after_hand = 7;
}

