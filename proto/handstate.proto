syntax = "proto3";
package game;
option go_package = "game";
import "game.proto";
import "hand.proto";
import "handmessage.proto";

message HandState {
  uint32 club_id = 1;

  uint64 game_id = 2;

  uint32 hand_num = 3;

  bytes deck = 4;
  uint32 deck_index = 5;

  // maximum 10 seats
  // tracks the players sitting on each seat
  // the seats are arranged as in typical poker table
  // seat 1 is left side of the dealer, seat 0 is right side of the dealer
  // if a seat is empty, then the player id is 0
  repeated uint64 players_in_seats = 6 [packed=true];

  // player current stack
  uint32 button_pos = 7;
  HandStatus current_state = 8;

  // updated as players fold
  repeated uint64 active_seats = 9;
  uint32 no_active_seats = 10;

  float current_raise = 11;
  uint32 action_complete_at_seat = 12;
  bool straddle_bet = 13;

  HandActionLog preflop_actions = 14;
  HandActionLog flop_actions = 15;
  HandActionLog turn_actions = 16;
  HandActionLog river_actions = 17;

  // for each pot we are going to track the players in the pot
  // the 0th pot is in the main pot
  repeated SeatsInPots pots = 18;

  // key is HandStatus
  //map <uint32, SeatBetting> round_betting = 20;
  map <uint32, RoundState> round_state = 20;
  

  // key is seat no
  map <uint32, bytes> players_cards = 21;
  bytes board_cards = 22;
  bytes board_cards_2 = 23;  // run it twice

  uint32 small_blind_pos = 24;
  uint32 big_blind_pos = 25;

  // key is player id
  map <uint64, HandPlayerState> players_state = 26;
  float next_min_raise = 27;

  // game type
  GameType game_type = 28;

  NextSeatAction next_seat_action = 29;

  // results
  uint64 hand_started_at = 30;  
  repeated PlayerBalance balance_before_hand = 31;
  map <uint32, PotWinners> pot_winners = 32; // 0 is main pot winners
  HandStatus hand_completed_at = 33;  
  repeated PlayerBalance balance_after_hand = 34;
  uint64 hand_ended_at = 35;  

  repeated PlayerActRound players_acted = 36;
  repeated uint32 all_in_players = 37;
  HandStatus lastState = 38;
  uint32 max_seats = 39;
  float big_blind = 40;
  float small_blind = 41;
  float straddle = 42;
  float rakePercentage = 43;
  float rakeCap = 44;

  repeated uint32 flop_cards = 45;
  uint32 turn_card = 46;
  uint32 river_card = 47;
  map <uint64, float> rake_paid = 48;  // rake paid by players 
  float rake_collected = 49;
  float current_raise_diff = 50;     // current raise diff
  float bet_before_raise = 51;       // bet before the raise
  float bring_in = 52;    // bring in chips

  FlowState flow_state = 53;
  HandMessage action_msg_in_progress = 54;

  map<uint64, PlayerStats> player_stats = 55;
  HandStats hand_stats = 56;
}
