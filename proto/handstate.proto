syntax = "proto3";
package game;
option go_package = "./game";
import "enums.proto";
import "hand.proto";
import "handmessage.proto";

// state used for run it twice option
message RunItTwice {
  HandStatus stage = 1;         // PREFLOP, FLOP, TURN, RIVER
  uint32 seat1 = 2;   // seat 1
  uint32 seat2 = 3;   // seat 2
  bool seat1_responded = 4;
  bool seat2_responded = 5;
  bool seat1_confirmed = 6; // seat 1 confirmed
  bool seat2_confirmed = 7; // seat 2 confirmed
  uint64 expiry_time = 8;  // unix time when the confirmation expires
}

message HandState {
  uint64 game_id = 2;

  uint32 hand_num = 3;

  bytes deck = 4;
  uint32 deck_index = 5;

  // maximum 10 seats
  // tracks the players sitting on each seat
  // the seats are arranged as in typical poker table
  // seat 1 is left side of the dealer, seat 0 is right side of the dealer
  // if a seat is empty, then the player id is 0
  //repeated uint64 players_in_seats = 6 [packed=true];

  // player current stack
  uint32 button_pos = 7;
  HandStatus current_state = 8;

  // updated as players fold
  repeated uint64 active_seats = 9;
  uint32 no_active_seats = 10;

  double current_raise = 11;
  uint32 action_complete_at_seat = 12;
  bool straddle_bet = 13;

  HandActionLog preflop_actions = 14;
  HandActionLog flop_actions = 15;
  HandActionLog turn_actions = 16;
  HandActionLog river_actions = 17;

  // for each pot we are going to track the players in the pot
  // the 0th pot is in the main pot
  repeated SeatsInPots pots = 18;

  // Used to generate hand message ID deterministically
  uint32 current_action_num = 19;

  // key is HandStatus
  //map <uint32, SeatBetting> round_betting = 20;
  map <uint32, RoundState> round_state = 20;
  

  // key is seat no
  map <uint32, bytes> players_cards = 21;
  bytes board_cards = 22;
  bytes board_cards_2 = 23;  // run it twice

  uint32 small_blind_pos = 24;
  uint32 big_blind_pos = 25;

  // key is player id
  //map <uint64, PlayerInSeatState> players_state = 26;
  repeated PlayerInSeatState players_in_seats = 26;
  double next_min_raise = 27;

  // game type
  GameType game_type = 28;

  // action waiting on players
  NextSeatAction next_seat_action = 29;

  // results
  uint64 hand_started_at = 30;  
  repeated PlayerBalance balance_before_hand = 31;
  map <uint32, PotWinners> pot_winners = 32; // 0 is main pot winners
  HandStatus hand_completed_at = 33;  
  repeated PlayerBalance balance_after_hand = 34;
  uint64 hand_ended_at = 35;  

  repeated PlayerActRound players_acted = 36;
  repeated uint32 all_in_players = 37;
  HandStatus lastState = 38;
  uint32 max_seats = 39;
  double big_blind = 40;
  double small_blind = 41;
  double straddle = 42;
  double rakePercentage = 43;
  double rakeCap = 44;

  map <uint64, double> rake_paid = 48;  // rake paid by players 
  double rake_collected = 49;
  double current_raise_diff = 50;     // current raise diff
  double bet_before_raise = 51;       // bet before the raise
  double bring_in = 52;    // bring in chips

  FlowState flow_state = 53;
  HandMessage action_msg_in_progress = 54;
  map<uint64, PlayerStats> player_stats = 55;
  map<uint64, TimeoutStats> timeout_stats = 56;
  HandStats hand_stats = 57;

  bool burn_cards = 58;
  bool run_it_twice_prompt = 59;      // Action waits on next seat action or run it twice prompt
  RunItTwice run_it_twice = 60;
  bool run_it_twice_confirmed = 61;
  map <uint32, PotWinners> board2_winners = 62; // second board winnners

  uint32 no_of_boards = 63; 
  repeated Board boards = 64;
  bool bomb_pot = 65;
  bool double_board = 66;
  double bomb_pot_bet = 67;
  bool include_stats_in_result = 68;
  uint32 result_pause_time = 69;
  uint32 total_result_pause_time = 70;
  uint32 action_time = 71;
  uint32 run_it_twice_timeout = 72;
  bool button_straddle = 73;

  map<uint64, string> encryption_keys = 74;

  // current high hand rank
  uint32 high_hand_rank = 75;
  bool high_hand_tracked = 76;
  repeated uint64 headsup_players = 77;
}
