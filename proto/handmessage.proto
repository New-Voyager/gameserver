syntax = "proto3";
package game;
option go_package = "./game";
import "enums.proto";
import "hand.proto";

message PlayerStats {
  bool preflop_raise = 1;
  bool postflop_raise = 2;
  bool three_bet = 5;
  bool cbet = 3;
  bool vpip = 4;
  bool allin = 6;
  bool went_to_showdown = 7;      // same as inShowdown
  bool won_chips_at_showdown = 8;
  bool headsup = 9;
  uint64 headsup_player = 10;
  bool won_headsup = 11;
  bool badbeat = 12;        // any four of a kinds gets beat
  bool in_preflop = 13;
  bool in_flop = 14;
  bool in_turn = 15;
  bool in_river = 16;
}

message TimeoutStats {
  uint32 consecutive_action_timeouts = 1;
  bool acted_at_least_once = 2;
}

message HandStats {
  bool ended_at_preflop = 1;
  bool ended_at_flop = 2;
  bool ended_at_turn = 3;
  bool ended_at_river = 4;
  bool ended_at_showdown = 5;
}

//NewHand message is sent to all the players to indicate which seat is next to act 
message NewHand {
  uint32 hand_num = 1;
  uint32 button_pos = 2;
  uint32 sb_pos = 3;
  uint32 bb_pos = 4;
  uint32 next_action_seat = 5;
  map <uint32, string> player_cards = 6;  // key: seat no, value: encrypted cards
  GameType game_type = 7;
  uint32 no_cards = 8;     // number of cards dealt to the players
  float small_blind = 9;
  float big_blind = 10;
  float bring_in = 11;
  float straddle = 12;
  map <uint32, PlayerInSeatState> players_in_seats = 13; // seat no, player status
  map<uint32, PlayerActRound> players_acted = 14;   // seat no, player action in this round
  bool bomb_pot = 15;
  bool double_board = 16;
  float bomb_pot_bet = 17;
}

//HandDealCards message is sent to each player when cards dealt to the player
message HandDealCards {
  uint32 seat_no = 1;
  //repeated uint32 cards = 2;  // I used int instead of byte is to display cards in json
  string cards = 2; // masked cards in string format
  //map <uint32, uint64> player_cards = 2;  // key: seat no, value: encrypted cards
  string cardsStr = 3; // string representation of the cards for logging
}

// Indicates to the players that has action has changed
// the UI can refresh and highlight the seat that is to act next
message ActionChange {
  uint32 seat_no = 1;
  repeated float pots = 2; // pots in the center
  float pot_updates = 3;   // pot updated based on the bets
  repeated SeatsInPots seats_pots = 4; // seats that participate in the pots
  float bet_amount = 5;  // bet amount in this betting round (used for check/fold)
}

message Flop {
  repeated uint32 board = 1;
  string cardsStr = 2; // string representation of the cards for logging
  repeated float pots = 3; // pots in the center
  repeated SeatsInPots seats_pots = 4; // seats that participate in the pots
  map <uint32, float> player_balance = 5; // player balance at the flop
  map <uint32, string> player_card_ranks = 6; // player card ranking
  repeated Board boards = 7;
}

message Turn {
  repeated uint32 board = 1;
  uint32 turn_card = 2;
  string cardsStr = 3; // string representation of the cards for logging
  repeated float pots = 4; // pots in the center
  repeated SeatsInPots seats_pots = 5; // seats that participate in the pots
  map <uint32, float> player_balance = 6; // player balance at the turn
  map <uint32, string> player_card_ranks = 7; // player card ranking
  repeated Board boards = 8;
}

message River {
  repeated uint32 board = 1;
  uint32 river_card = 2;
  string cardsStr = 3; // string representation of the cards for logging
  repeated float pots = 4; // pots in the center
  repeated SeatsInPots seats_pots = 5; // seats that participate in the pots
  map <uint32, float> player_balance = 6; // player balance at the river
  map <uint32, string> player_card_ranks = 7; // player card ranking
  repeated Board boards = 9;
}

message SeatCards {
  repeated uint32 cards = 2;  // I used int instead of byte is to display cards in json
  string cardsStr = 3; // string representation of the cards for logging
}

message Showdown {
  repeated SeatCards seat_cards = 1;  // cards of all the active players
  repeated float pots = 2; // pots in the center
  repeated SeatsInPots seats_pots = 3; // seats that participate in the pots
  map <uint32, float> player_balance = 4; // player balance at the showdown
}

// This message is sent when both players confirm run
message RunItTwiceBoards {
  repeated uint32 board_1 = 1;
  repeated uint32 board_2 = 2;
  HandStatus stage = 3;
  repeated SeatsInPots seats_pots = 4; // seats that participate in the pots
  uint32 seat1 = 5;
  uint32 seat2 = 6;
}

message NoMoreActions {
  repeated SeatsInPots pots = 1;
}

message RunItTwiceResult {
  HandStatus run_it_twice_started_at = 1; // which stage run it twice started?
  map <uint32, PotWinners> board_1_winners = 2;   // board 1 winners 
  map <uint32, PotWinners> board_2_winners = 3;   // board 2 winners 
}

message HandLog {
  HandActionLog preflop_actions = 1;
  HandActionLog flop_actions = 2;
  HandActionLog turn_actions = 3;
  HandActionLog river_actions = 4;
  map <uint32, PotWinners> pot_winners = 5; // 0 is main pot winners
  HandStatus won_at = 6;
  Showdown show_down = 8;   // cards shown at show down
  uint64 hand_started_at = 9;  
  uint64 hand_ended_at = 11;
  bool run_it_twice = 12;            // run it twice
  RunItTwiceResult run_it_twice_result = 13;
  repeated SeatsInPots seats_pots_showdown = 14; // pots and associated seats at showdown
  repeated Board boards = 15;
  map <uint32, PotWinnersV2> pot_winners_2 = 16; // pot winners for each board
}

message PlayerInfo {
  uint64 id = 1;                    // player id
  repeated uint32 cards = 2;        // cards
  repeated uint32 best_cards = 3;   // best_cards
  uint32 rank = 4;                  // best rank
  HandStatus played_until = 5;      // played until what stage
  HandPlayerBalance balance = 6;
  repeated uint32 hh_cards = 7;     // high hand cards
  uint32 hh_rank = 8;      // high hand rank
  float received = 9;     // received from the hand
  float rake_paid = 10;   // rake paid by this player
}

message HandResult  {
  uint64 game_id = 1;
  uint32 hand_num = 2;
  GameType game_type = 3;
  uint32 no_cards = 4;          // number of player cards
  HandLog hand_log = 5;
  repeated uint32 reward_tracking_ids = 6;
  repeated uint32 board_cards = 7;
  repeated uint32 board_cards_2 = 8;  // run it twice
  repeated uint32 flop = 9;
  uint32 turn = 10;
  uint32 river = 11;
  map<uint32, PlayerInfo> players = 12;    // player cards with rank (key: seat_no)
  float rake_collected = 13;               // rake collected from the hand
  HighHand high_hand = 14;
  map<uint64, PlayerStats> player_stats = 15;
  HandStats hand_stats = 16;
  bool run_it_twice = 17;                 // indicates the players ran it twice
  float small_blind = 18;
  float big_blind = 19;
  float ante = 20;
  uint32 max_players = 21;
}

message HandResultClient {
  bool run_it_twice = 1;                 // indicates the players ran it twice
  repeated uint32 active_seats = 2;
  HandStatus won_at = 3;
  repeated Board boards = 4;
  repeated PotWinnersV2 pot_winners = 5; // pot winners for each board
  uint32 pause_time_secs = 6; // pauses for each pot winner animation
  map <uint32, PlayerHandInfo> player_info = 7;
  bool scoop = 8; // indicates whether the player scooped all the pots
  map<uint64, PlayerStats> player_stats = 9;
  map<uint64, TimeoutStats> timeout_stats = 10;
  uint32 hand_num = 11;
  float tips_collected = 12;
}

message HandLogV2 {
  HandActionLog preflop_actions = 1;
  HandActionLog flop_actions = 2;
  HandActionLog turn_actions = 3;
  HandActionLog river_actions = 4;
  uint64 hand_started_at = 9;  
  uint64 hand_ended_at = 11;
}

message HandResultServer {
  uint64 game_id = 1;
  uint32 hand_num = 2;
  GameType game_type = 3;
  uint32 no_cards = 4;          // number of player cards
  HandLog hand_log = 5;
  HandStats hand_stats = 6;
  bool run_it_twice = 8;                 // indicates the players ran it twice
  uint32 button_pos = 9;
  float small_blind = 10;
  float big_blind = 11;
  float ante = 12;
  uint32 max_players = 13;
  HandResultClient  result = 14;
  HandLogV2 log = 15;
}


message MsgAcknowledgement {
  string message_id = 1;
  string message_type = 2;
}

message Announcement {
  string type = 1;
  repeated string params = 2;   // parameters for internationlization  
}

message HandMessage {
  string version = 1;
  string game_code = 2;
  uint32 hand_num = 3;
  uint32 seat_no = 4;       // if this message is targeted to a specific player
  uint64 player_id = 5;
  string message_id = 6;
  string game_token = 7;    // game token assigned to a player for this game
  HandStatus hand_status = 8;
  repeated HandMessageItem messages = 9;
}

message DealerChoice {
  uint64 player_id = 1;
  repeated GameType games = 2;
  uint32 timeout = 3;
}

message PingPongMessage {
  uint64 game_id = 1;
  string game_code = 2;
  uint64 player_id = 3;
  uint32 seq = 4;
}

//HandMessage packages the actual message with Hand information (clubid, game_num, hand_num) 
message HandMessageItem {
  string message_type = 7;
  oneof content {
    NextSeatAction  seat_action = 12;
    HandDealCards deal_cards = 13;
    NewHand new_hand = 14;
    HandAction player_acted = 15;
    ActionChange action_change = 16;
    HandResult hand_result = 17;
    Flop flop = 18;
    Turn turn = 19;
    River river = 20;
    Showdown showdown = 21;
    NoMoreActions no_more_actions = 22;
    CurrentHandState current_hand_state = 23;
    MsgAcknowledgement msg_ack = 24;
    HighHand high_hand = 25;      // announce high hand
    RunItTwiceBoards run_it_twice = 26;   // to display run it twice cards
    Announcement announcement = 27;
    DealerChoice dealer_choice = 28;
    HandResultClient hand_result_client = 29;
    ExtendTimer extend_timer = 30;  // to extend action timer for the current action player
    ResetTimer reset_timer = 31;  // to reset action timer for the current action player
  }
}
