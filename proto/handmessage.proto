syntax = "proto3";
package game;
option go_package = "game";
import "gamestate.proto";
import "handstate.proto";


//NewHand message is sent to all the players to indicate which seat is next to act 
message NewHand {
  uint32 button_pos = 1;
  uint32 sb_pos = 2;
  uint32 bb_pos = 3;
  uint32 next_action_seat = 4;
  map <uint32, string> player_cards = 5;  // key: seat no, value: encrypted cards
}

//HandDealCards message is sent to each player when cards dealt to the player
message HandDealCards {
  uint32 seat_no = 1;
  //repeated uint32 cards = 2;  // I used int instead of byte is to display cards in json
  string cards = 2; // masked cards in string format
  //map <uint32, uint64> player_cards = 2;  // key: seat no, value: encrypted cards
  string cardsStr = 3; // string representation of the cards for logging
}

// Indicates to the players that has action has changed
// the UI can refresh and highlight the seat that is to act next
message ActionChange {
  uint32 seat_no = 1;
  repeated float pots = 2; // pots in the center
  float pot_updates = 3;   // pot updated based on the bets
  repeated SeatsInPots seats_pots = 4; // seats that participate in the pots
}

message Flop {
  repeated uint32 board = 1;
  string cardsStr = 2; // string representation of the cards for logging
}

message Turn {
  repeated uint32 board = 1;
  uint32 turn_card = 2;
  string cardsStr = 3; // string representation of the cards for logging
}

message River {
  repeated uint32 board = 1;
  uint32 river_card = 2;
  string cardsStr = 3; // string representation of the cards for logging
}

message SeatCards {
  repeated uint32 cards = 2;  // I used int instead of byte is to display cards in json
  string cardsStr = 3; // string representation of the cards for logging
}

message Showdown {
  repeated SeatCards seat_cards = 1;  // cards of all the active players
}

message NoMoreActions {
  repeated SeatsInPots pots = 1;
}

message HandLog {
  HandActionLog preflop_actions = 1;
  HandActionLog flop_actions = 2;
  HandActionLog turn_actions = 3;
  HandActionLog river_actions = 4;
  map <uint32, PotWinners> pot_winners = 5; // 0 is main pot winners
  HandStatus won_at = 6;
  Showdown show_down = 8;   // cards shown at show down
  uint64 hand_started_at = 9;  
  uint64 hand_ended_at = 11;
}

message HighHand {
  uint64 player_id = 1;
  uint32 hh_rank = 2;
  repeated uint32 cards = 3;
  repeated uint32 player_cards = 4;
}

message HandPlayerBalance {
  float before = 1;
  float after = 2;
}

message PlayerInfo {
  uint64 id = 1;                    // player id
  repeated uint32 cards = 2;        // cards
  repeated uint32 best_cards = 3;   // best_cards
  uint32 rank = 4;                  // best rank
  HandStatus played_until = 5;      // played until what stage
  HandPlayerBalance balance = 6;
}

message HandResult  {
  uint64 game_id = 1;
  uint32 hand_num = 2;
  GameType game_type = 3;
  HandLog hand_log = 4;
  repeated uint32 reward_tracking_ids = 5;
  repeated uint32 board_cards = 6;
  repeated uint32 board_cards_2 = 7;  // run it twice
  repeated uint32 flop = 8;
  uint32 turn = 9;
  uint32 river = 10;
  map<uint32, PlayerInfo> players = 11;    // player cards with rank (key: seat_no)
}

//HandMessage packages the actual message with Hand information (clubid, game_num, hand_num) 
message HandMessage {
  string version = 1;
  uint32 club_id = 2;
  uint64 game_id = 3;
  string game_code = 4;
  uint32 hand_num = 5;
  uint32 seat_no = 6;       // if this message is targeted to a specific player
  string message_type = 7;
  uint64 player_id = 8;
  string game_token = 9;    // game token assigned to a player for this game
  HandStatus hand_status = 10;
  oneof hand_message {
    NextSeatAction  seat_action = 11;
    HandDealCards deal_cards = 12;
    NewHand new_hand = 13;
    HandAction player_acted = 14;
    ActionChange action_change = 15;
    HandResult hand_result = 16;
    Flop flop = 17;
    Turn turn = 18;
    River river = 19;
    Showdown showdown = 20;
    NoMoreActions no_more_actions = 21;
    CurrentHandState current_hand_state = 22;
  }
}
