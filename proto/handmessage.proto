syntax = "proto3";
package game;
option go_package = "game";
import "gamestate.proto";
import "handstate.proto";


//NewHand message is sent to all the players to indicate which seat is next to act 
message NewHand {
  uint32 button_pos = 1;
  uint32 sb_pos = 2;
  uint32 bb_pos = 3;
  uint32 next_action_seat = 4;
  map <uint32, string> player_cards = 5;  // key: seat no, value: encrypted cards
}

//HandDealCards message is sent to each player when cards dealt to the player
message HandDealCards {
  uint32 seat_no = 1;
  repeated uint32 cards = 2;  // I used int instead of byte is to display cards in json
  //map <uint32, uint64> player_cards = 2;  // key: seat no, value: encrypted cards
  string cardsStr = 3; // string representation of the cards for logging
}

// Indicates to the players that has action has changed
// the UI can refresh and highlight the seat that is to act next
message ActionChange {
  uint32 seat_no = 1;
  repeated SeatsInPots pots = 2;
}

message Flop {
  repeated uint32 board = 1;
  string cardsStr = 2; // string representation of the cards for logging
}

message Turn {
  repeated uint32 board = 1;
  uint32 turn_card = 2;
  string cardsStr = 3; // string representation of the cards for logging
}

message River {
  repeated uint32 board = 1;
  uint32 river_card = 2;
  string cardsStr = 3; // string representation of the cards for logging
}

message SeatCards {
  repeated uint32 cards = 2;  // I used int instead of byte is to display cards in json
  string cardsStr = 3; // string representation of the cards for logging
}

message Showdown {
  repeated SeatCards seat_cards = 1;  // cards of all the active players
}

message NoMoreActions {
  repeated SeatsInPots pots = 1;
}

message HandResult {
  HandActionLog preflop_actions = 1;
  HandActionLog flop_actions = 2;
  HandActionLog turn_actions = 3;
  HandActionLog river_actions = 4;
  map <uint32, PotWinners> pot_winners = 5; // 0 is main pot winners
  HandStatus won_at = 6;
  repeated PlayerBalance balance_after_hand = 7;
  Showdown show_down = 8;   // cards shown at show down
  uint64 hand_started_at = 9;  
  repeated PlayerBalance balance_before_hand = 10;
  uint64 hand_ended_at = 11;
  
  // seat number is index and player id is value
  repeated uint64 players_in_seats = 12;
}


//HandMessage packages the actual message with Hand information (clubid, game_num, hand_num) 
message HandMessage {
  string version = 1;
  uint32 club_id = 2;
  uint64 game_id = 3;
  uint32 hand_num = 4;
  uint32 seat_no = 5;       // if this message is targeted to a specific player
  string message_type = 6;
  uint64 player_id = 7;
  HandStatus hand_status = 8;
  oneof hand_message {
    NextSeatAction  seat_action = 9;
    HandDealCards deal_cards = 10;
    NewHand new_hand = 11;
    HandAction player_acted = 12;
    ActionChange action_change = 13;
    HandResult hand_result = 14;
    Flop flop = 15;
    Turn turn = 16;
    River river = 17;
    Showdown showdown = 18;
    NoMoreActions no_more_actions = 19;
    HandState current_hand_state = 20;
  }
}
