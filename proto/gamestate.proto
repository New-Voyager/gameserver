syntax = "proto3";
package game;
option go_package = "game";


enum PlayerStatus {
  NOT_PLAYING = 0;
  PLAYING = 1;
  IN_QUEUE = 2;
  IN_BREAK = 3;
  STANDING_UP = 4;
  LEFT = 5;
  KICKED_OUT = 6;
  BLOCKED = 7;
  LOST_CONNECTION = 8;
  WAIT_FOR_BUYIN = 9;
}

message PlayerState {
  float buy_in = 1;
  float current_balance = 2;
  PlayerStatus status = 3;
}

enum GameType {
  UNKNOWN = 0;
  HOLDEM = 1;
  PLO = 2;
  PLO_HILO = 3;
}

// GameStatus is controlled by the Host of the game
enum GameStatus {
  GAME_STATUS_UNKNOWN = 0;
  CONFIGURED = 1;
  ACTIVE = 2;
  PAUSED = 3;
  ENDED = 4;
}

// TableStatus is determined by the Game server
enum TableStatus {
  TABLE_STATUS_UNKNOWN = 0;
  TABLE_STATUS_WAITING_TO_BE_STARTED = 1;
  TABLE_STATUS_NOT_ENOUGH_PLAYERS = 2;
  TABLE_STATUS_GAME_RUNNING = 3;
}

// Player update comes from the API server
// The same message is sent for 
//    Player sitting in a seat
//    Player buying/reloading chips
//    Player taking a break
//    Player leaving the game
message GamePlayerUpdate {
  uint64 player_id = 1;
  uint32 seat_no = 2;
  float stack = 3;
  float buy_in = 4;
  PlayerStatus status = 5;
}

message GameState {

  uint32 club_id = 1;
  uint64 game_id = 2;   // game id is unique in the system
  // max 15 seats reserved

  // index 0-8 for 9 seats
  // the array item is player id
  // if array item is 0, that means the seat is empty 
  repeated uint64 players_in_seats = 3 [packed=true];

  // players in the table and the queue
  repeated uint64 players_in_game = 4 [packed=true];

  // players who participated in the game
  map<uint64, PlayerState> players_state = 5;

  bool utg_straddle_allowed = 6;

  bool button_straddle_allowed = 7;

  // game status
  GameStatus status = 8;
  
  // game type
  GameType game_type = 9;

  // current hand num
  uint32 hand_num = 10;

  uint32 button_pos = 11;

  float small_blind = 12;

  float big_blind = 13;

  uint32 max_seats = 14;
  uint32 min_players = 15;
  uint32 game_length = 16;
  float rakePercentage = 17;
  float rakeCap = 18;
  float buyInMin = 19;
  float buyInMax = 20;
  uint32 actionTime = 21;
  bool privateGame = 22;
  uint32 breakLength = 23;
  bool autoKickAfterBreak = 24;

  // table status
  TableStatus table_status = 25;

  float straddle = 26;
}

message PendingGameUpdates {
  uint64 game_id = 1;
  repeated GamePlayerUpdate player_updates = 2;
}
