syntax = "proto3";
package game;
option go_package = "./game";
import "game.proto";


enum ACTION {
  SB = 0;
  BB = 1;
  STRADDLE = 2;
  CHECK = 3;
  CALL = 4;
  FOLD = 5;
  BET = 6;
  RAISE = 7;
  ALLIN = 8;
  RUN_IT_TWICE_YES = 9;
  RUN_IT_TWICE_NO = 10;
  RUN_IT_TWICE_PROMPT = 11;
}

message HandAction {
  uint32    seat_no = 1;
  ACTION    action = 2;
  float     amount = 3;
  bool timed_out = 4;
  uint32 action_time = 5;
  float stack = 6;        // player current stack (populated by game)
}

message HandActionLog {
  float pot_start = 1;
  float pot = 2;
  repeated HandAction actions = 3; 
}

message BetRaiseOption {
  string text = 1;
  float amount = 2;
}

message NextSeatAction {
  uint32 seat_no = 1;
  repeated ACTION available_actions = 2;
  float straddleAmount = 3;       // straddle amount
  float callAmount = 4;           // what is the amount to call
  float raiseAmount = 5;          // if the caller wants to raise from previous raise
  float minBetAmount = 6;         // min bet is the big blind
  float maxBetAmount = 7;        // calculated for PLO
  float minRaiseAmount = 8;      // min bet is the big blind
  float maxRaiseAmount = 9;      // calculated for PLO
  float allInAmount = 10;         // all in amount
  repeated BetRaiseOption betOptions = 11; // bet/raise options
  int64 actionTimesoutAt = 12;   // Unix time that the player's action times out
}

message PlayerInSeatState {
  uint64 player_id = 1;
  string name = 2;
  PlayerStatus status = 3;
  float stack = 4;
  HandStatus round = 5;
  float playerReceived = 6;
  string buy_in_exp_time = 7;
  string break_exp_time = 8;
}

message PlayerBalance {
  uint32 seat_no = 1;
  uint64 player_id = 2;
  float balance = 3;
}

enum HandStatus {
  DEAL = 0;
  PREFLOP = 1;
  FLOP = 2;
  TURN = 3;
  RIVER = 4;
  SHOW_DOWN = 5;
  EVALUATE_HAND = 6;
  RESULT = 7;
  HAND_CLOSED = 8;
}

// This enum is used to determine whether all the players in a round
// has a chance to act or not.
// As soon as a player raises the bet, all the previously acted players
// will have to act again.
// All in will be treated as acted
enum PlayerActState {
  PLAYER_ACT_EMPTY_SEAT = 0;
  PLAYER_ACT_NOT_ACTED = 1;
  PLAYER_ACT_FOLDED = 2;
  PLAYER_ACT_ALL_IN = 4;     // all in
  PLAYER_ACT_BB = 5;
  PLAYER_ACT_STRADDLE = 6;
  PLAYER_ACT_BET = 7;
  PLAYER_ACT_CALL = 8;
  PLAYER_ACT_RAISE = 9;
  PLAYER_ACT_CHECK = 10;
  
  // bet/raise/call/bb/straddle
}

message HighHandWinner {
  uint64 player_id = 1;
  string player_name = 2;
  uint32 hh_rank = 3;
  repeated uint32 hh_cards = 4;
  repeated uint32 player_cards = 5;
  uint32 seat_no = 6;
}

message HighHand {
  string gameCode = 1;
  uint32 hand_num = 2;
  repeated HighHandWinner winners = 3;
}

message PlayerActRound {
  PlayerActState  state = 1;
  float amount = 2;
  float raiseAmount = 3;

  // tracks what bet index this action applies to 
  uint32 acted_bet_index = 4;
}

// message tracks number of players in this pot and the amount in the pot
message SeatsInPots {
  repeated uint32 seats  = 1;
  float pot = 2;
}

message SeatBetting {
  repeated float seat_bet  = 1;
}


message RoundState {
  SeatBetting betting = 1;
  map<uint32, float> player_balance = 2;

  // bet_index is incremented anytime a player increase the wager.
  // then this index is used to determine whether a player has already acted for this bet_index (PlayerActed)
  uint32 bet_index = 3;
}

message CurrentHandState {
  uint64 game_id = 1;

  uint32 hand_num = 2;

  // game type
  GameType game_type = 3;

  HandStatus current_round = 4;

  uint32 button_pos = 5;
  uint32 small_blind_pos = 6;
  uint32 big_blind_pos = 7;

  float big_blind = 8;
  float small_blind = 9;
  float straddle = 10;

  map<uint32, PlayerActRound> players_acted = 12;   // seat no, player action in this round

  repeated uint32 board_cards = 13;
  repeated uint32 board_cards_2 = 14;  // run it twice
  string cardsStr = 15; // string representation of the cards for logging
  string cards2Str = 16; // string representation of the cards for logging
  
  string player_cards = 17;  // current player's cards if the player is playing
  uint32 player_seat_no = 18; // current player's seat no
  map <uint64, float> players_stack = 19; 
  uint32 next_seat_to_act = 20;
  uint32 remaining_action_time = 21;

  NextSeatAction next_seat_action = 22;
  repeated float pots = 23; // pots in the center
  float pot_updates = 24;   // pot updated based on the bets
  uint32 no_cards = 25;     // number of cards dealt to players
}

message HandWinner {
  uint32 seat_no = 1;
  bool lo_card = 2;
  float amount = 3;
  repeated uint32 winning_cards = 4;
  string winning_cards_str = 5;
  string rank_str = 6;
  uint32 rank = 7;
  repeated uint32 player_cards = 8;
  repeated uint32 board_cards = 9;
}

message PotWinners {
  uint32 pot_no = 1;
  float amount = 2;
  repeated HandWinner hi_winners = 3;
  repeated HandWinner low_winners = 4;
}

enum FlowState {
	DEAL_HAND                   = 0;
	WAIT_FOR_NEXT_ACTION        = 1;
	PREPARE_NEXT_ACTION         = 2;
	MOVE_TO_NEXT_ACTION         = 3;
	MOVE_TO_NEXT_ROUND          = 4;
	ALL_PLAYERS_ALL_IN          = 5;
	ONE_PLAYER_REMAINING        = 6;
	SHOWDOWN                    = 7;
	HAND_ENDED                  = 8;
  MOVE_TO_NEXT_HAND           = 9;
	RUNITTWICE_UP_PROMPT        = 10;
	RUNITTWICE_PROMPT_RESPONSE  = 11;
}
