syntax = "proto3";
package game;
option go_package = "./game";
import "enums.proto";

enum ACTION {
  ACTION_UNKNOWN=0;
  EMPTY_SEAT = 1;
  NOT_ACTED = 2;
  SB = 3;
  BB = 4;
  STRADDLE = 5;
  CHECK = 6;
  CALL = 7;
  FOLD = 8;
  BET = 9;
  RAISE = 10;
  ALLIN = 11;
  RUN_IT_TWICE_YES = 12;
  RUN_IT_TWICE_NO = 13;
  RUN_IT_TWICE_PROMPT = 14;
  POST_BLIND = 15;
  BOMB_POT_BET = 16;
}

message HandAction {
  uint32    seat_no = 1;
  ACTION    action = 2;
  float     amount = 3;
  bool timed_out = 4;
  uint32 action_time = 5;
  float stack = 6;        // player current stack (populated by game)
}

message HandActionLog {
  float pot_start = 1;
  repeated float pots = 2;
  repeated HandAction actions = 3; 
  repeated SeatsInPots seats_pots = 4;
}

message BetRaiseOption {
  string text = 1;
  float amount = 2;
}

message NextSeatAction {
  uint32 seat_no = 1;
  repeated ACTION available_actions = 2;
  float straddleAmount = 3;       // straddle amount
  float callAmount = 4;           // what is the amount to call
  float raiseAmount = 5;          // if the caller wants to raise from previous raise
  float minBetAmount = 6;         // min bet is the big blind
  float maxBetAmount = 7;        // calculated for PLO
  float minRaiseAmount = 8;      // min bet is the big blind
  float maxRaiseAmount = 9;      // calculated for PLO
  float allInAmount = 10;         // all in amount
  repeated BetRaiseOption betOptions = 11; // bet/raise options
  int64 actionTimesoutAt = 12;   // Unix time that the player's action times out
  uint32 secondsTillTimesout = 13;  // Seconds left until the player's action times out
  float seatInSoFar = 14;       // amount of chips this seat put in this round
}

message PlayerInSeatState {
  uint64 player_id = 1;
  string name = 2;
  PlayerStatus status = 3;
  float stack = 4;
  HandStatus round = 5;
  float playerReceived = 6;
  string buy_in_exp_time = 7;
  string break_exp_time = 8;
  bool inhand = 9;
  bool open_seat = 10;
  bool posted_blind = 11;
  uint32 seat_no = 12;
  bool run_it_twice = 13;
  bool missed_blind = 14;
}

message PlayerBalance {
  uint32 seat_no = 1;
  uint64 player_id = 2;
  float balance = 3;
}

enum HandStatus {
  HandStatus_UNKNOWN = 0;
  DEAL = 1;
  PREFLOP = 2;
  FLOP = 3;
  TURN = 4;
  RIVER = 5;
  SHOW_DOWN = 6;
  EVALUATE_HAND = 7;
  RESULT = 8;
  HAND_CLOSED = 9;
}

// This enum is used to determine whether all the players in a round
// has a chance to act or not.
// As soon as a player raises the bet, all the previously acted players
// will have to act again.
// All in will be treated as acted
// enum PlayerActState {
//   PLAYER_ACT_UNKNOWN = 0;
//   PLAYER_ACT_EMPTY_SEAT = 1;
//   PLAYER_ACT_NOT_ACTED = 2;
//   PLAYER_ACT_FOLDED = 3;
//   PLAYER_ACT_ALL_IN = 4;     // all in
//   PLAYER_ACT_BB = 5;
//   PLAYER_ACT_STRADDLE = 6;
//   PLAYER_ACT_BET = 7;
//   PLAYER_ACT_CALL = 8;
//   PLAYER_ACT_RAISE = 9;
//   PLAYER_ACT_CHECK = 10;
//   PLAYER_ACT_POST_BLIND = 11;
//   PLAYER_ACT_BOMB_POT = 12;
//   PLAYER_ACT_SB = 13;

//   PLAYER_ACT_RUN_IT_TWICE_YES = 10;
//   PLAYER_ACT_RUN_IT_TWICE_NO = 11;
//   PLAYER_ACT_RUN_IT_TWICE_PROMPT = 12;
// }

message HighHandWinner {
  uint64 player_id = 1;
  string player_name = 2;
  uint32 hh_rank = 3;
  repeated uint32 hh_cards = 4;
  repeated uint32 player_cards = 5;
  uint32 seat_no = 6;
}

message HighHand {
  string gameCode = 1;
  uint32 hand_num = 2;
  repeated HighHandWinner winners = 3;
}

message PlayerActRound {
  ACTION  action = 1;
  float amount = 2;
  float raiseAmount = 3;

  // tracks what bet index this action applies to 
  uint32 acted_bet_index = 4;

  // total bet of the player in this round
  // used for calculating player stack
  float bet_amount = 5;
}

// message tracks number of players in this pot and the amount in the pot
message SeatsInPots {
  repeated uint32 seats  = 1;
  float pot = 2;
}

message SeatBetting {
  repeated float seat_bet  = 1;
}


message RoundState {
  SeatBetting betting = 1;
  map<uint32, float> player_balance = 2;

  // bet_index is incremented anytime a player increase the wager.
  // then this index is used to determine whether a player has already acted for this bet_index (PlayerActed)
  uint32 bet_index = 3;
}

message CurrentHandState {
  uint64 game_id = 1;

  uint32 hand_num = 2;

  // game type
  GameType game_type = 3;

  HandStatus current_round = 4;

  uint32 button_pos = 5;
  uint32 small_blind_pos = 6;
  uint32 big_blind_pos = 7;

  float big_blind = 8;
  float small_blind = 9;
  float straddle = 10;

  map<uint32, PlayerActRound> players_acted = 12;   // seat no, player action in this round

  repeated uint32 board_cards = 13;
  repeated uint32 board_cards_2 = 14;  // run it twice
  string cardsStr = 15; // string representation of the cards for logging
  string cards2Str = 16; // string representation of the cards for logging
  
  string player_cards = 17;  // current player's cards if the player is playing
  uint32 player_seat_no = 18; // current player's seat no
  map <uint64, float> players_stack = 19; 
  uint32 next_seat_to_act = 20;
  uint32 remaining_action_time = 21;

  NextSeatAction next_seat_action = 22;
  repeated float pots = 23; // pots in the center
  float pot_updates = 24;   // pot updated based on the bets
  uint32 no_cards = 25;     // number of cards dealt to players
  bool bomb_pot = 36;
  bool double_board = 37;
  float bomb_pot_bet = 38;
}

message HandWinner {
  uint32 seat_no = 1;
  bool lo_card = 2;
  float amount = 3;
  repeated uint32 winning_cards = 4;
  string winning_cards_str = 5;
  string rank_str = 6;
  uint32 rank = 7;
  repeated uint32 player_cards = 8;
  repeated uint32 board_cards = 9;
}

message PotWinners {
  uint32 pot_no = 1;
  float amount = 2;
  repeated HandWinner hi_winners = 3;
  repeated HandWinner low_winners = 4;
  uint32 pause_time = 5;      // pause time 
}

enum FlowState {
	DEAL_HAND                   = 0;
	WAIT_FOR_NEXT_ACTION        = 1;
	PREPARE_NEXT_ACTION         = 2;
  MOVE_TO_NEXT_HAND           = 3;
  WAIT_FOR_PENDING_UPDATE     = 4;
}


message BoardCardRank {
  uint32 board_no = 1;
  uint32 seat_no = 2;
  uint32 hi_rank = 3;
  repeated uint32 hi_cards = 4;
  bool low_found = 5;
  uint32 lo_rank = 6;
  repeated uint32 lo_cards = 7;   // best_cards
  uint32 best_rank = 8;   // for high hand
  repeated uint32 best_cards = 9;   // best_cards
}

message Board {
  uint32 board_no = 1;
  repeated uint32 cards = 2;        // cards
  map <uint32, BoardCardRank> player_rank = 3;
}

message Winner {
  uint32 seat_no = 1;
  float amount = 2;
}

message BoardWinner {
  uint32 board_no = 2;
  float amount = 3;                  // pot amount for this board
  map <uint32, Winner> hi_winners = 4;    // hi winners of the board (seat number)
  map <uint32, Winner> low_winners = 5;   // low winners of the board (seat number)
  string hi_rank_text = 6; 
}

message PotWinnersV2 {
  uint32 pot_no = 1;
  float amount = 2;
  repeated BoardWinner board_winners = 3;
  repeated uint32 seats_in_pots = 4;
}

message HandResultV2 {
  repeated Board boards = 1;
  repeated PotWinnersV2 pot_winners = 2;
}

message HandPlayerBalance {
  float before = 1;
  float after = 2;
}

message PlayerHandInfo {
  uint64 id = 1;                    // player id
  repeated uint32 cards = 2;        // cards
  HandStatus played_until = 5;      // played until what stage
  HandPlayerBalance balance = 6;
  repeated uint32 hh_cards = 7;     // high hand cards
  uint32 hh_rank = 8;      // high hand rank
  float received = 9;     // received from the hand
  float rake_paid = 10;   // rake paid by this player
}